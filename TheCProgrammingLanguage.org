#+TITLE: The C Programing Language
#+AUTHOR: Caesar X Insanium

* Purpose

Learning ANSI C programming language. Get good at C programming. Learn of how much
power that it has and be able to use it to level up my Nim programming.

* Miscellaneous

- ANSI refers to American National Standards Institute

* Introduction

- system's programming language, developed for use in Unix systems
- language where most trivial luxuries are not provided built into the
  language or must be defined externally with a standard library.
- single threaded control by default
- floating point is built into the language
- C is a weakly typed language, because any thing and everything is a void
  pointer.

Standard library defines functions, constants and variables for basic interaction
with the OS and basic IO.

- Appendix A: language reference manual
- Appendix B: Standard Library Reference
- Appendix C: Changelog of Language Standards

* Chapter 1: Tutorial

** 1.1 Getting Started

The chapter emphasizes the need to start with simple understandable programs before
learning the nitty gritty of a language.

#+begin_src c :tangle code/hello_world.c :mkdirp yes
#include <stdio.h>

main(void){
  printf("Hello World!\n");
  return 0;
}
#+end_src

This simple functions prints hello world to the standard out in Unix systems. This
code defines functions and constants for working with I/O stuff in standard library.
defines a special function main and call a function =printf= that  writes characters
to standard out.

A string constant or character string is a literal that defines an array of characters
for the program to work with.

*** Exercises

The GCC compiler is smart enough to now some that characters are missing in certain
places. Sometimes it knows that in order to use some functions which header in
include in the file in order to make a valid program.

There is not that many escape codes in which to to add to the formatting argument.

** 1.2 Variables and Arithmetic Expressions

Simple code that defines some Fahrenheit values and their Celcius equivalents.

#+begin_src c :tangle code/fahrenheit.c :mkdirp yes
#include <stdio.h>

main(){
  int fahr, celcius;
  int lower, upper, step;

  lower = 0;
  upper = 300;
  step = 20;

  fahr = lower;

  while(fahr <= upper){
    celcius = 5 * (fahr - 32) / 9;

    printf("%d\t%d\n", fahr, celcius);
    fahr = fahr - step;
  }
}
#+end_src

This bit of code just goes for a really long time does it not?

The C programming language includes other things such as structures, pointers,
arrays, functions. 

Printf is not defined to the C language but rather it is generally defined for the
ANSI standard which defines a bunch of other useful functons and constants with
predictable and similar behaviour accross implementations.

C integer arithmetic is truncated.

#+begin_src c :tangle code/temp.c
#include <stdio.h>

int main(void){
  float fahr, celcius;
  int lower, upper, step;

  lower = 0;
  upper = 300;
  step = 20;

  fahr = lower;

  while(fahr <= upper){
    // if arithmetic is peformed with int and float, then int it converted to int
    // and then result converted back to int implicitly
    celcius = (5.0/9.0) * (fahr - 32.0);
    // %3.0f tree characters and with no decimal part
    // %6.1f 6 chars plus 1 decimal char
    printf("%3.0f %6.1f\n", fahr, celcius);

    fahr = fahr + step;
  }
}
#+end_src

Recomend going back to page 13 to look for more format specifiers.

** 1.3 The For Statement

The book present another version of the tempature converter. This one uses the for
statement. I already wrote my own version with the for loop.

The 3 parts of a four loop are the initializer, the test condition, and finally
increment step. Each is an expression that is compiled in order to the loop running.

** 1.4 Symbolic Constants

The preprocessor can be used to store different constants that are important in the
running of a program. a =#define= directive is used in order to define certain
sections of text that the preprocessor needs to replace at each instance.

#+begin_src c :tangle false
#include <stdio.h>
#define LOWER 0
#define UPPER 300
#define STEP 20
#+end_src

** 1.5 Character Input and Output

The c standard library provided some methods for promoting user for input and to
work with that character input. One of these is =getchar=. Which prompts from
STDIN and returns a single =char=. Put char prints it out to STDOUT.

Text Stream :: sequence of characters seperated by newlines.

#+begin_src c :tangle false
#include <stdio.h>
int main(void){
  char c = getchar();
  putchar(c);
  return c;
}
#+end_src

There are the only functions needed to program some rudamentary =cat= clone. When looping
trough the file, one must be careful to not go past the EOF marker since that is where
the file ends and can no longer be further read. An integer value is required to
make sure that there is enough space to hold the =EOF= marker.

Of course we can check the LibC docs, or linux interface headers.

I did not know that you could do an assignment inside of a while loop and then have
that expression to test for a condition.

#+begin_src c :tangle false
#include <stdio.h>
int main(void){
  int i;
  while((i = getchar()) != EOF){
    putchar(i);
  }
}
#+end_src

The value of the statement if the value of the left hand side.

*** 1.5.2 Character Counting

The =++= operator increments and integer value by one. If it is a prefix the value
is first incremented and then evaluated. If it is postfix then the argument is first
evaluated and then incremented.

An isolated semicolor is a /null/ statement and indicates a do nothing section.

When a  =for= and =while= loop conditions test before starting and find that there
is nothing to do, then nothing will be done. Except for the =do= statement which
exececutes that body at least once.

*** 1.5.3 Line Counting

It is possible to count newlines, tabs and blanks in a file using C. I just wrote
a program do to just that.
